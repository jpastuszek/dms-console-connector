#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'cli'
require 'pathname'
require 'dms-core'
require 'facter'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

settings = CLI.new do
	description "DMS data processor query tool"
	version VERSION
	switch :debug,
		short: :d,
		description: 'enable debugging'
	option :console_connector_sub_address,
		short: :e, 
		description: 'ZeroMQ adderss of console connector - subscriber', 
		default: 'ipc:///tmp/dms-console-connector-sub'
	option :console_connector_pub_address,
		short: :E, 
		description: 'ZeroMQ adderss of console connector - publisher', 
		default: 'ipc:///tmp/dms-console-connector-pub'
	option :hello_wait,
		short: :w,
		cast: Float,
		description: 'wait given number of seconds for Hello message',
		default: 4
	option :response_wait,
		short: :W,
		cast: Float,
		description: 'wait given number of seconds for responses',
		default: 4
	option :time_from,
		short: :f,
		cast: lambda{|s| Time.parse(s + ' UTC')},
		description: 'time string representing how recent the data should be',
		default: Time.now.to_s
	option :time_span,
		short: :t,
		cast: Float,
		description: 'for how many seconds from time-form should the data be going back to',
		default: 60*60
	option :granularity,
		short: :g,
		cast: Float,
		description: 'minimal time differenc between values in seconds',
		default: 1.0
	arguments :tag_expression
end.parse!

id = "#{Facter.fqdn}:#{Process.pid}"

ZeroMQ.new do |zmq|
	poller = ZeroMQ::Poller.new
	log.info "subscribing to console publisher address: #{settings.console_connector_pub_address}"
	zmq.sub_connect(settings.console_connector_pub_address) do |query_sub|
		log.info "publishing to console subscriber address: #{settings.console_connector_sub_address}"
		zmq.pub_connect(settings.console_connector_sub_address, hwm: 10, linger: 0) do |query_pub|
			poller << query_sub

			got_hello = nil
			query_sub.on Hello, id do |hello|
				got_hello = true
				log.info "got: #{hello}"
			end
			
			log.info "wiating #{settings.hello_wait} seconds for Hello message..."
			hello_times = settings.hello_wait / 0.1
			until got_hello
				query_pub.send Discover.new, topic: id
				if hello_times <= 0
					log.error "did not receive Hello from any process, exiting"
					exit 1
				end
				hello_times -= 1
				poller.poll 0.1
			end

			query_sub.on DataSet, id do |data_set|
				log.info "#{data_set}"
			end

			query = DataSetQuery.new(settings.tag_expression.join(', '), settings.time_from, settings.time_span, settings.granularity)
			log.info "sending query: #{query}"

			query_pub.send query, topic: id

			log.info "waiting #{settings.response_wait} seconds for responses..."
			poller.poll! settings.response_wait
		end
	end
end

