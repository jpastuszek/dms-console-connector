#!/usr/bin/env ruby
# Copyright (c) 2012 Jakub Pastuszek
#
# This file is part of Distributed Monitoring System.
#
# Distributed Monitoring System is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Distributed Monitoring System is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Distributed Monitoring System.  If not, see <http://www.gnu.org/licenses/>.

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'pathname'
require 'facter'
require 'dms-core'

VERSION = (Pathname.new(__FILE__).dirname + '../VERSION').read

Program::Tool.new('DMS Discover', VERSION) do
	cli do
		description "DMS network discovery tool"

		internal_console_connection
		option :hello_wait,
			short: :w,
			cast: Float,
			description: 'wait given number of seconds for Hello message',
			default: 4
		argument :host_name,
			description: 'host FQDN or /regexp/',
			default: ''
		argument :program,
			description: 'name of program to match',
			default: ''
	end

	main do |settings|
		id = "#{Facter.fqdn}:#{Process.pid}"
		ZeroMQ.new do |zmq|
			poller = ZeroMQ::Poller.new
			log.debug "internal console subscriber: #{settings.internal_console_subscriber}, publisher: #{settings.internal_console_publisher}"
			zmq.bus_connect(settings.internal_console_publisher, settings.internal_console_subscriber, {hwm: 10, linger: 0}) do |bus|
				poller << bus

				got_hello = nil
				bus.on Hello, id do |hello|
					got_hello = true
					log.info "got: #{hello}"
				end

				discover = Discover.new(settings.host_name, settings.program)

				log.info "emiting: #{discover}"
				log.debug "wiating #{settings.hello_wait} seconds for Hello messages..."

				time_left = settings.hello_wait
				until got_hello
					bus.send discover, topic: id
					if time_left <= 0
						log.error "did not receive Hello from any process, exiting"
						exit 1
					end
					poller.poll 0.1
					time_left -= 0.1
				end

				poller.poll! time_left
			end
		end
	end
end

